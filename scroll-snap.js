!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports["scroll-snap"]=I():g["scroll-snap"]=I()}(window,function(){return function(g){var I={};function n(C){if(I[C])return I[C].exports;var t=I[C]={i:C,l:!1,exports:{}};return g[C].call(t.exports,t,t.exports,n),t.l=!0,t.exports}return n.m=g,n.c=I,n.d=function(g,I,C){n.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},n.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},n.t=function(g,I){if(1&I&&(g=n(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(n.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var t in g)n.d(C,t,function(I){return g[I]}.bind(null,t));return C},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/index.ts\nvar SCROLL_TIMEOUT_DEFAULT = 300;\nvar SCROLL_TIME_DEFAULT = 2;\nvar NOOP = function () { };\nfunction easeInCubic(t, b, c, d) {\n    return c * (t = t / d) * t * t + b;\n}\nfunction position(start, end, elapsed, duration) {\n    if (elapsed > duration) {\n        return end;\n    }\n    return easeInCubic(elapsed, start, end - start, duration);\n}\nvar ScrollSnap = /** @class */ (function () {\n    function ScrollSnap(element, config) {\n        var _this = this;\n        this.animating = false;\n        this.lastScrollValue = {\n            x: 0,\n            y: 0,\n        };\n        this.startAnimation = function () {\n            _this.speedDeltaX = _this.checkScrollSpeed(_this.target.scrollLeft, 'x');\n            _this.speedDeltaY = _this.checkScrollSpeed(_this.target.scrollTop, 'y');\n            if (_this.animating || (_this.speedDeltaX === 0 && _this.speedDeltaY === 0)) {\n                return;\n            }\n            _this.handler(_this.target);\n        };\n        this.animationHandler = function () {\n            // if we don't move a thing, we can ignore the timeout: if we did, there'd be another timeout added for this.scrollStart+1.\n            if (_this.scrollStart.y === _this.target.scrollTop &&\n                _this.scrollStart.x === _this.target.scrollLeft) {\n                // ignore timeout\n                return;\n            }\n            // detect direction of scroll. negative is up, positive is down.\n            var direction = {\n                y: _this.speedDeltaY > 0 ? 1 : -1,\n                x: _this.speedDeltaX > 0 ? 1 : -1,\n            };\n            // get the next snap-point to snap-to\n            var snapPoint = _this.getNextSnapPoint(_this.target, direction);\n            _this.target.removeEventListener('scroll', _this.startAnimation, false);\n            _this.animating = true;\n            // smoothly move to the snap point\n            _this.smoothScroll(_this.target, snapPoint, function () {\n                // after moving to the snap point, rebind the scroll event handler\n                _this.animating = false;\n                _this.target.addEventListener('scroll', _this.startAnimation, false);\n                _this.onAnimationEnd();\n            });\n            // we just jumped to the snapPoint, so this will be our next this.scrollStart\n            if (!isNaN(snapPoint.x) || !isNaN(snapPoint.y)) {\n                _this.scrollStart = snapPoint;\n            }\n        };\n        this.element = element;\n        this.config = config;\n        if (config.scrollTimeout &&\n            (isNaN(config.scrollTimeout) || typeof config.scrollTimeout === 'boolean')) {\n            throw new Error(\"Optional config property 'scrollTimeout' is not valid, expected NUMBER but found \" + (typeof config.scrollTimeout).toUpperCase());\n        }\n        this.SCROLL_TIMEOUT = config.scrollTimeout || SCROLL_TIMEOUT_DEFAULT;\n        if (config.scrollTime && (isNaN(config.scrollTime) || typeof config.scrollTime === 'boolean')) {\n            throw new Error(\"Optional config property 'scrollTime' is not valid, expected NUMBER but found \" + (typeof config.scrollTime).toUpperCase());\n        }\n        this.SCROLL_TIME = config.scrollTime || SCROLL_TIME_DEFAULT;\n        if (!config.scrollSnapDestination) {\n            throw new Error('Required config property scrollSnapDestination is not defined');\n        }\n        this.SCROLL_SNAP_DESTINATION = config.scrollSnapDestination;\n    }\n    ScrollSnap.prototype.checkScrollSpeed = function (value, axis) {\n        var _this = this;\n        var clear = function () {\n            _this.lastScrollValue[axis] = null;\n        };\n        var newValue = value;\n        var delta;\n        if (this.lastScrollValue[axis] !== null) {\n            delta = newValue - this.lastScrollValue[axis];\n        }\n        else {\n            delta = 0;\n        }\n        this.lastScrollValue[axis] = newValue;\n        this.scrollSpeedTimer && clearTimeout(this.scrollSpeedTimer);\n        this.scrollSpeedTimer = setTimeout(clear, 50);\n        return delta;\n    };\n    ScrollSnap.prototype.saveDeclaration = function (obj) {\n        this.snapLengthUnit = this.parseSnapCoordValue(this.SCROLL_SNAP_DESTINATION);\n    };\n    ScrollSnap.prototype.bindElement = function (element) {\n        this.target = element;\n        /**\n         * set webkit-overflow-scrolling to auto.\n         * this prevents momentum scrolling on ios devices\n         * causing flickering behaviours and delayed transitions.\n         */\n        this.target.style.overflow = 'auto';\n        // @ts-ignore\n        this.target.style.webkitOverflowScrolling = 'auto';\n        this.target.addEventListener('scroll', this.startAnimation, false);\n        this.saveDeclaration(this.target);\n    };\n    ScrollSnap.prototype.unbindElement = function (element) {\n        // @ts-ignore\n        element.style.webkitOverflowScrolling = null;\n        element.removeEventListener('scroll', this.startAnimation, false);\n    };\n    /**\n     * scroll handler\n     * this is the callback for scroll events.\n     */\n    ScrollSnap.prototype.handler = function (target) {\n        // if currently this.animating, stop it. this prevents flickering.\n        if (this.animationFrame) {\n            clearTimeout(this.animationFrame);\n        }\n        // if a previous timeout exists, clear it.\n        if (this.scrollHandlerTimer) {\n            // we only want to call a timeout once after scrolling..\n            clearTimeout(this.scrollHandlerTimer);\n        }\n        else {\n            this.scrollStart = {\n                y: target.scrollTop,\n                x: target.scrollLeft,\n            };\n        }\n        this.scrollHandlerTimer = setTimeout(this.animationHandler, this.SCROLL_TIMEOUT);\n    };\n    ScrollSnap.prototype.getNextSnapPoint = function (target, direction) {\n        // get snap length\n        var snapLength = {\n            y: this.roundByDirection(direction.y, this.getYSnapLength(this.target, this.snapLengthUnit.y)),\n            x: this.roundByDirection(direction.x, this.getXSnapLength(this.target, this.snapLengthUnit.x)),\n        };\n        var top = this.target.scrollTop;\n        var left = this.target.scrollLeft;\n        // calc current and initial snappoint\n        var currentPoint = {\n            y: top / snapLength.y || 1,\n            x: left / snapLength.x || 1,\n        };\n        var nextPoint = {\n            y: 0,\n            x: 0,\n        };\n        // set target and bounds by direction\n        nextPoint.y = this.roundByDirection(direction.y, currentPoint.y);\n        nextPoint.x = this.roundByDirection(direction.x, currentPoint.x);\n        // calculate where to scroll\n        var scrollTo = {\n            y: nextPoint.y * snapLength.y,\n            x: nextPoint.x * snapLength.x,\n        };\n        // stay in bounds (minimum: 0, maxmimum: absolute height)\n        scrollTo.y = this.stayInBounds(0, target.scrollHeight, scrollTo.y);\n        scrollTo.x = this.stayInBounds(0, target.scrollWidth, scrollTo.x);\n        return scrollTo;\n    };\n    ScrollSnap.prototype.roundByDirection = function (direction, currentPoint) {\n        if (direction === -1) {\n            // when we go up, we floor the number to jump to the next snap-point in scroll direction\n            return Math.floor(currentPoint);\n        }\n        // go down, we ceil the number to jump to the next in view.\n        return Math.ceil(currentPoint);\n    };\n    ScrollSnap.prototype.stayInBounds = function (min, max, destined) {\n        return Math.max(Math.min(destined, max), min);\n    };\n    ScrollSnap.prototype.parseSnapCoordValue = function (declaration) {\n        // regex to parse lengths\n        var regex = /(\\d+)(px|%|vw) (\\d+)(px|%|vh)/g;\n        // defaults\n        var parsed = {\n            y: {\n                value: 0,\n                unit: 'px',\n            },\n            x: {\n                value: 0,\n                unit: 'px',\n            },\n        };\n        var parsable;\n        var result;\n        // parse value and unit\n        if (parsable !== null) {\n            result = regex.exec(declaration);\n            // if regexp fails, value is null\n            if (result !== null) {\n                parsed.x = {\n                    value: Number(result[1]),\n                    unit: result[2],\n                };\n                parsed.y = {\n                    value: Number(result[3]),\n                    unit: result[4],\n                };\n            }\n        }\n        return parsed;\n    };\n    ScrollSnap.prototype.getYSnapLength = function (obj, declaration) {\n        if (declaration.unit === 'vh') {\n            // when using vh, one snap is the length of vh / 100 * value\n            return ((Math.max(document.documentElement.clientHeight, window.innerHeight || 1) / 100) *\n                declaration.value);\n        }\n        else if (declaration.unit === '%') {\n            // when using %, one snap is the length of element height / 100 * value\n            return (obj.offsetHeight / 100) * declaration.value;\n        }\n        else {\n            // when using px, one snap is the length of element height / value\n            return obj.offsetHeight / declaration.value;\n        }\n    };\n    ScrollSnap.prototype.getXSnapLength = function (obj, declaration) {\n        if (declaration.unit === 'vw') {\n            // when using vw, one snap is the length of vw / 100 * value\n            return ((Math.max(document.documentElement.clientWidth, window.innerWidth || 1) / 100) *\n                declaration.value);\n        }\n        else if (declaration.unit === '%') {\n            // when using %, one snap is the length of element width / 100 * value\n            return (obj.offsetWidth / 100) * declaration.value;\n        }\n        else {\n            // when using px, one snap is the length of element width / value\n            return obj.offsetWidth / declaration.value;\n        }\n    };\n    ScrollSnap.prototype.isEdge = function (start) {\n        return (start.x === 0 && this.speedDeltaY === 0) || (start.y === 0 && this.speedDeltaX === 0);\n    };\n    ScrollSnap.prototype.smoothScroll = function (obj, end, callback) {\n        var start = {\n            y: obj.scrollTop,\n            x: obj.scrollLeft,\n        };\n        // get animation frame or a fallback\n        var requestAnimationFrame = window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (fn) {\n                return window.setTimeout(fn, 15);\n            };\n        var duration = this.isEdge(start) ? 0 : this.SCROLL_TIME;\n        var startTime;\n        // setup the stepping function\n        function step(timestamp) {\n            if (!startTime) {\n                startTime = timestamp;\n            }\n            var elapsed = timestamp - startTime;\n            // change position on y-axis if result is a number.\n            if (!isNaN(end.y)) {\n                obj.scrollTop = position(start.y, end.y, elapsed, duration);\n            }\n            // change position on x-axis if result is a number.\n            if (!isNaN(end.x)) {\n                obj.scrollLeft = position(start.x, end.x, elapsed, duration);\n            }\n            // check if we are over due;\n            if (elapsed < duration) {\n                requestAnimationFrame(step);\n            }\n            else {\n                // is there a callback?\n                if (typeof callback === 'function') {\n                    // stop execution and run the callback\n                    return callback(end);\n                }\n            }\n        }\n        this.animationFrame = requestAnimationFrame(step);\n    };\n    ScrollSnap.prototype.bind = function (callback) {\n        this.onAnimationEnd = typeof callback === 'function' ? callback : NOOP;\n        this.bindElement(this.element);\n    };\n    ScrollSnap.prototype.unbind = function () {\n        this.unbindElement(this.element);\n    };\n    return ScrollSnap;\n}());\n/* harmony default export */ var src = (ScrollSnap);\n\n// CONCATENATED MODULE: ./demo/src/index.ts\n\nvar snapConfig = {\n    scrollSnapDestination: '0% 90%',\n    scrollTimeout: 100,\n    scrollTime: 300,\n};\nfunction callback() {\n    console.log('snap');\n}\nvar src_element = document.getElementById('container');\nvar snapObject = new src(src_element, snapConfig);\nsnapObject.bind(callback);\n// unbind element\n// snapObject.unbind();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}])});